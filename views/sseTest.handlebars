<style>
.coinicon {
  max-height: 3rem;
}
.progress {
  height: 1rem;
  font-weight: bolder;
}
.progress p {
  position: absolute;
  left:0;
  right:0;
  user-select: none;
}
</style>

<div class="container-fluid bg-transparent text-center">
  <div class="row">
    <h1 class="col">Real-time Demo</h1>
  </div>
  <div id="rtList" class="row">
    {{#each coins}}
    <div class="col d-flex align-items-center">
      <img class="coinicon" title="{{this.name}} ({{this.symbol}})" alt="{{this.name}}" src="images/cryptocurrency-icons/{{this.symbol}}@2x.png">
      <p class="rtValue m-0 ml-1 text-nowrap" data-id="{{this.symbol}}"></p>
    </div>
    {{else}}
    <p class="col">There are currently no Coins being tracked.</p>
    {{/each}}
  </div>
  <div class="row">
    <div class="col p-0 progress rounded-0 bg-transparent">
      <div class="progress-bar bg-info" style="width: 50%"></div>
      <p class="m-0 text-dark">Next Update in: <span id="timeUntilUpdate">time</span></p>
    </div>
  </div>
</div>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

<script>
  $(document).ready(function () {
    // Find and store elements for real-time coin values
    let rtElements = {};
    document.querySelectorAll("#rtList .rtValue").forEach(ele => {
      rtElements[ele.dataset.id] = ele;
    });
    {{!-- console.log(rtElements); --}}

    let updateTimer = {id: NaN};
    resetTimer(updateTimer);

    new EventSource('/stream')
      .addEventListener('latestQuotes',
        ({ data } = {}) => {
          data = JSON.parse(data);
          if (data.quotes) {
            resetTimer(updateTimer);
            Object.entries(data.quotes).forEach(([symbol, quote]) => {
              $(rtElements[symbol])
                .hide()
                .text(`$ ${quote.toFixed(4)}`)
                .fadeIn(1500);
            });
          }
        }
      );

    function resetTimer(timer) {
      clearInterval(timer.id);
      const SECONDS_PER_UPDATE = 10;
      const UPDATE_INTERVAL_DIVISOR = 10; // update every half of a second
      let multOfSecsLeft = SECONDS_PER_UPDATE * UPDATE_INTERVAL_DIVISOR;

      timer.id = setInterval(() => {
        // Checking at top of this function to get a full, last interval
        if (multOfSecsLeft <= 0) {
          clearInterval(timer.id); // stop the timer
        }
        else {
          --multOfSecsLeft;

          let secondsLeft = (multOfSecsLeft / UPDATE_INTERVAL_DIVISOR);
          // If less than 10 seconds, display a single decimal digit
          $(timeUntilUpdate).text(
            (secondsLeft).toFixed(secondsLeft > 10 ? 0 : 1)
          );

          // Calculate the percentage of time remaining to update progress bar
          let percent = secondsLeft / SECONDS_PER_UPDATE * 100;
          $('.progress-bar')
            .css("width", `${percent}%`)
            .attr("aria-valuenow", percent);
        }
      }, 1000 / UPDATE_INTERVAL_DIVISOR); // seconds to update timer displays
    }
  });
</script>